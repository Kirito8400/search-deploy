<section class="vs-snp-image-search-float">
  <button class="vs-snp-image-search-button" id="vs-snp-image-search-button" aria-label="Search by image">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
      <circle cx="8.5" cy="8.5" r="1.5"></circle>
      <polyline points="21 15 16 10 5 21"></polyline>
      <line x1="16" y1="16" x2="20" y2="20"></line>
    </svg>
    <span class="vs-snp-image-search-plus">+</span>
  </button>

  <div class="vs-snp-image-search-modal" id="vs-snp-image-search-modal">
    <div class="vs-snp-image-search-modal-content">
      <div class="vs-snp-image-search-modal-header">
        <h2>Image Search</h2>
        <button class="vs-snp-image-search-close" id="vs-snp-image-search-close">&times;</button>
      </div>
      <div class="vs-snp-image-search-modal-body">
        <!-- Add error message container -->
        <div class="vs-snp-image-search-error" id="vs-snp-image-search-error" style="display: none;">
          <p>Error searching for products. Please try again.</p>
        </div>

        <!-- Add loading indicator -->
        <div class="vs-snp-image-search-loading" id="vs-snp-image-search-loading" style="display: none;">
          <div class="vs-snp-image-search-spinner"></div>
          <p>Searching for similar products...</p>
        </div>

        <div class="vs-snp-image-upload-result-wrapper">
          <div class="vs-snp-image-search-upload-area" id="vs-snp-image-search-upload-area">
            <div class="vs-snp-image-search-upload-icon" id="vs-snp-image-search-upload-icon">
              <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000">
                <path d="M0 0h24v24H0V0z" fill="none"/><path d="M18 20H4V6h9V4H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-9h-2v9zm-7.79-3.17l-1.96-2.36L5.5 18h11l-3.54-4.71zM20 4V1h-2v3h-3c.01.01 0 2 0 2h3v2.99c.01.01 2 0 2 0V6h3V4h-3z"/>
              </svg>
            </div>
            <div class="vs-snp-image-preview-wrapper" style="position: relative;">
              <div class="">
                <img
                  id="vs-snp-image-preview"
                  class="vs-snp-image-preview"
                  style="display: none;"
                  alt="Image preview"
                  width=""
                  height=""
                >
                <div class="vs-snp-svg-wrapper" style="position: absolute;">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    version="1.1"
                    width="256"
                    height="256"
                    viewBox="0 0 256 256"
                    xml:space="preserve"
                  >
                    <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">
                    	<polygon points="2,25.95 0,25.95 0,0 25.95,0 25.95,2 2,2 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    	<polygon points="90,25.95 88,25.95 88,2 64.05,2 64.05,0 90,0 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    	<polygon points="25.95,90 0,90 0,64.05 2,64.05 2,88 25.95,88 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    	<polygon points="90,90 64.05,90 64.05,88 88,88 88,64.05 90,64.05 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    </g>
                  </svg>
                </div>
              </div>
              <div class="vs-snp-upload-area-loading" id="vs-snp-upload-area-loading" style="display: none;">
                <div class="vs-snp-image-search-spinner"></div>
              </div>
              <!-- New loader for preview -->
              <div class="vs-snp-image-preview-loading" id="vs-snp-image-preview-loading" style="display: none;">
                <div class="vs-snp-image-search-spinner"></div>
              </div>
            </div>
            <p>Drag and drop your image here, click "Upload Image," or paste the image here</p>
            <button class="vs-snp-image-search-upload-button" id="vs-snp-image-search-upload-button">
              Upload Image
            </button>
            <input type="file" id="vs-snp-image-search-file-input" accept="image/*" style="display: none;">
            <!-- New button to upload another image -->
            <button class="vs-snp-upload-another-button" id="vs-snp-upload-another-button" style="display: none;">
              Upload Another
            </button>
          </div>

          <!-- Add results container -->
          <div class="vs-snp-image-search-results" id="vs-snp-image-search-results" style="display: none;">
            {% comment %} <h3>Similar Products</h3> {% endcomment %}
            <div class="vs-snp-image-search-results-grid" id="vs-snp-image-search-results-grid">
              <!-- Results will be dynamically added here -->
            </div>
            <!-- Skeleton loader container -->
            <div
              class="vs-snp-image-search-skeleton-grid"
              id="vs-snp-image-search-skeleton-grid"
              style="display: none;"
            >
              <!-- Skeleton items will be dynamically added here -->
            </div>
          </div>
        </div>

        <div class="vs-snp-image-search-popular">
          <h3>Popular Search Product Images</h3>
          <div class="vs-snp-image-search-popular-grid">
            <!-- Popular product images would be dynamically loaded here -->
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              class="vs-snp-popular-image"
              loading="lazy"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-snp-popular-image"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-snp-popular-image"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-snp-popular-image"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-snp-popular-image"
            >
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Add the following styles for the modal -->
<style>
  .vs-snp-image-search-float {
    position: fixed;
    bottom: 130px;
    right: -5px;
    z-index: 999;
  }

  .vs-snp-image-search-button {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    transition: all 0.3s ease;
  }

  .vs-snp-image-search-button:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.25);
  }

  .vs-snp-image-search-plus {
    position: absolute;
    bottom: 5px;
    right: 5px;
    font-size: 16px;
    font-weight: bold;
    background-color: #4a4a4a;
    color: white;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .vs-snp-image-search-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .vs-snp-image-search-modal-content {
    background-color: white;
    border-radius: 10px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .vs-snp-image-search-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #d3d0d0;
  }

  .vs-snp-image-search-modal-header h2 {
    margin: 0;
    font-size: 18px;
    font-weight: 500;
    /* text-transform: uppercase; */
    /* font-family: 'Nunito' !important; */
  }

  .vs-snp-image-search-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #555;
  }

  .vs-snp-image-search-modal-body {
    padding: 20px;
    background: #eeeeee8f;
  }

  .vs-snp-image-search-upload-area {
    border: 2px dashed #ccc;
    border-radius: 8px;
    padding: 30px;
    text-align: center;
    background: #fff;
    margin-bottom: 20px;
  }

  .vs-snp-image-search-upload-icon {
    margin-bottom: 15px;
  }
  .vs-snp-image-search-upload-icon svg {
    width: 30px;
    height: auto;
    margin-bottom: -10px;
  }

  .vs-snp-image-search-upload-button {
    background-color: #000;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    /* margin-top: 15px; */
    font-size: 16px;
  }

  .vs-snp-image-search-popular h3 {
    margin-top: 0;
    margin-bottom: 15px;
  }

  .vs-snp-image-search-popular-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 10px;
  }

  .vs-snp-image-search-popular-grid img {
    width: 100%;
    height: auto;
    border-radius: 4px;
    cursor: pointer;
    aspect-ratio: 2/2.4;
    object-fit: cover;
  }

  .vs-snp-image-search-popular-grid img:hover {
    transform: scale(1.03);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .vs-snp-image-search-popular {
    padding-top: 10px;
  }
  .vs-snp-image-search-float .vs-snp-sg-product-image {
    margin: 0 !important;
  }
  .vs-snp-sg-product-image img {
    aspect-ratio: 2 / 2.4 !important;
    object-fit: cover;
  }
</style>

<style>
  /* Existing styles would be here */

  /* Add styles for results grid */
  .vs-snp-image-search-results-grid,
  .vs-snp-image-search-skeleton-grid /* Apply grid styles to skeleton grid too */ {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }

  .vs-snp-image-search-product-card {
    cursor: pointer;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .vs-snp-image-search-product-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .vs-snp-image-search-product-info {
    /* padding: 15px; */
  }

  .vs-snp-image-search-product-title {
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 16px;
    line-height: 1.3;
  }

  .vs-snp-image-search-product-score {
    display: inline-block;
    background-color: #e3f1df;
    color: #414f3e;
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    margin-bottom: 8px;
  }

  .vs-snp-image-search-product-type {
    color: #666;
    font-size: 12px;
    margin-bottom: 8px;
  }

  .vs-snp-image-search-product-description {
    font-size: 14px;
    color: #333;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Loading spinner */
  .vs-snp-image-search-loading {
    text-align: center;
    padding: 0px;
  }

  .vs-snp-image-search-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: vs-snp-spin 2s linear infinite;
    margin: 0 auto 15px;
  }
  .vs-snp-image-search-float .vs-snp-sg-product-image {
    margin: 0 !important;
  }

  @keyframes vs-snp-spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Error message */
  .vs-snp-image-search-error {
    text-align: center;
    color: #d9534f;
    padding: 0;
    background: #f8d7da;
    border: 1px solid #f5c2c7;
    border-radius: 3px;
    color: #842029;
    margin-bottom: 20px;
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    min-width: fit-content;
    line-height: 1.3;
  }
  .vs-snp-image-search-error p {
    margin: 6px;
    font-size: 14px;
  }

  .vs-snp-image-search-results-grid,
  .vs-snp-image-search-skeleton-grid {
    /* Apply margin to both */
    margin: 0 !important;
  }
  .vs-snp-image-search-upload-icon svg {
    width: 54px !important;
  }
  .vs-snp-image-search-product-score,
  .vs-snp-image-search-product-type,
  .vs-snp-image-search-product-description {
    display: none;
  }
  .vs-snp-image-search-product-card {
    border: 0px !important;
    border-radius: 0 !important;
  }
  .vs-snp-image-search-product-image {
    width: 100%;
    height: 100%;
    /* object-fit: cover;
    aspect-ratio: 1 / 1; /* Changed to 1/1 for skeleton consistency */
    /* border-radius: 8px; */
  }
  .vs-snp-image-search-product-info {
    padding: 0px !important;
    text-align: center;
  }

  .vs-snp-image-search-upload-area {
    position: relative; /* Needed for absolute positioning of children */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    border: 2px dashed #ccc;
    border-radius: 8px;
    padding: 40px 20px;
    cursor: pointer;
    transition: border-color 0.3s ease;
    min-height: 200px; /* Ensure enough space */
  }
  .vs-snp-image-search-upload-area p {
    line-height: 1.4;
    font-size: 14px;
    width: 75%;
  }

  .vs-snp-image-search-upload-icon,
  .vs-snp-image-preview,
  .vs-snp-upload-area-loading,
  .vs-snp-image-preview-loading /* Add the new loader here */ {
    position: absolute; /* Position icon, preview, spinner in the same spot */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 100%;
    max-height: 100%;
    object-fit: contain; /* Ensure image fits without distortion */
  }

  .vs-snp-image-search-upload-icon svg {
    width: 54px !important;
    height: auto;
  }

  .vs-snp-image-preview {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .vs-snp-upload-area-loading .vs-snp-image-search-spinner,
  .vs-snp-image-preview-loading .vs-snp-image-search-spinner /* Style spinner within new loader */ {
    margin: 0; /* Center spinner within its container */
  }
  .vs-snp-image-search-spinner {
    display: block !important;
  }

  /* Hide text and button when preview or loading is active */
  .vs-snp-image-search-upload-area.has-content p,
  .vs-snp-image-search-upload-area.has-content button:not(#vs-snp-upload-another-button) {
    /* Exclude the new button */
    display: none;
  }

  /* Style for the new "Upload Another" button */
  .vs-snp-upload-another-button {
    margin-top: 10px; /* Space below the preview/loader */
    padding: 10px 20px;
    background-color: #000; /* Example background color */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    position: relative; /* Position relative to the upload area */
    z-index: 10; /* Ensure it's above the preview/loaders */
  }

  .vs-snp-upload-another-button:hover {
    background-color: #333; /* Darker shade on hover */
  }

  /* Adjust positioning for the upload area content when preview is shown */
  .vs-snp-image-search-upload-area.has-content {
    justify-content: flex-start; /* Align items to the top */
    padding-top: 20px; /* Add padding if needed */
  }

  .vs-snp-image-search-upload-area.has-content .vs-snp-image-preview,
  .vs-snp-image-search-upload-area.has-content .vs-snp-image-preview-loading {
    position: static; /* Remove absolute positioning */
    transform: none; /* Remove transform */
    margin-bottom: 10px; /* Space between preview/loader and button */
    max-width: 100%;
    max-height: 200px; /* Limit preview height */
    width: auto; /* Allow width to adjust */
  }
  .vs-snp-image-preview {
    height: auto;
    aspect-ratio: 1 / 1;
    object-fit: cover;
    max-height: fit-content !important;
    min-width: 100%;
    border: 2px solid #333333c9;
    border-radius: 8px;
  }
  .vs-snp-image-preview-loading {
    position: absolute !important;
    transform: translate(-50%, -50%) !important;
  }
  .vs-snp-image-search-upload-icon {
    position: static !important;
    transform: none !important;
    margin: 0 !important;
  }

  /* Skeleton Loader Styles */
  .vs-snp-image-search-skeleton-item {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    background-color: #f0f0f0;
    animation: vs-snp-pulse 1.5s infinite ease-in-out;
  }

  .vs-snp-image-search-skeleton-image {
    display: block !important;
    width: 100%;
    height: 200px; /* Match product image height */
    background-color: #e0e0e0;
    aspect-ratio: 1 / 1; /* Match product image aspect ratio */
  }

  .vs-snp-image-search-skeleton-info {
    display: block !important;
    padding: 15px;
  }

  .vs-snp-image-search-skeleton-title {
    display: block !important;
    width: 80%;
    height: 16px; /* Match product title height */
    background-color: #e0e0e0;
    margin-bottom: 8px;
    border-radius: 4px;
  }

  .vs-snp-image-search-skeleton-image,
  .vs-snp-image-search-skeleton-info,
  .vs-snp-image-search-skeleton-title {
    display: block !important;
  }

  @keyframes vs-snp-pulse {
    0% {
      background-color: #f0f0f0;
    }
    50% {
      background-color: #e0e0e0;
    }
    100% {
      background-color: #f0f0f0;
    }
  }

  .vs-snp-svg-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
  }
  .vs-snp-svg-wrapper svg {
    opacity: 8;
    background: #ffffff3b;
  }

  .vs-snp-card-image-wrapper {
    overflow: hidden;
    width: 100%;
    height: auto;
    object-fit: cover;
    aspect-ratio: 1 / 1;
    border-radius: 8px;
    margin-bottom: 10px;
    transition: 1s linear;
  }

  .vs-snp-card-image-wrapper:hover img {
    transition: 1s linear;
    transform: scale(1.06);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const button = document.getElementById('vs-snp-image-search-button');
    const modal = document.getElementById('vs-snp-image-search-modal');
    const closeButton = document.getElementById('vs-snp-image-search-close');
    const uploadButton = document.getElementById('vs-snp-image-search-upload-button');
    const fileInput = document.getElementById('vs-snp-image-search-file-input');
    const uploadArea = document.getElementById('vs-snp-image-search-upload-area');
    const loadingElement = document.getElementById('vs-snp-image-search-loading'); // Main modal loading
    const resultsElement = document.getElementById('vs-snp-image-search-results');
    const resultsGrid = document.getElementById('vs-snp-image-search-results-grid');
    const errorElement = document.getElementById('vs-snp-image-search-error');
    const popularImages = document.querySelectorAll('.vs-snp-popular-image');

    // New elements for upload area content
    const uploadIcon = document.querySelector('.vs-snp-image-search-upload-icon'); // Use class selector
    const imagePreview = document.getElementById('vs-snp-image-preview');
    const uploadAreaLoading = document.getElementById('vs-snp-upload-area-loading'); // Spinner before preview
    const imagePreviewLoading = document.getElementById('vs-snp-image-preview-loading'); // Spinner over preview
    const uploadAnotherButton = document.getElementById('vs-snp-upload-another-button'); // Get the new button
    const skeletonGrid = document.getElementById('vs-snp-image-search-skeleton-grid'); // Get the skeleton container

    // Function to reset the upload area display
    function resetUploadArea() {
      uploadIcon.style.display = 'block';
      imagePreview.style.display = 'none';
      imagePreview.src = ''; // Clear previous preview
      uploadAreaLoading.style.display = 'none';
      imagePreviewLoading.style.display = 'none'; // Hide the preview loader
      uploadAnotherButton.style.display = 'none'; // Hide the new button
      uploadArea.classList.remove('has-content'); // Remove class to show text/button

      // Hide results and skeleton loaders
      resultsElement.style.display = 'none';
      resultsGrid.innerHTML = ''; // Clear previous results
      skeletonGrid.style.display = 'none'; // Hide skeleton grid
      skeletonGrid.innerHTML = ''; // Clear previous skeletons
      errorElement.style.display = 'none'; // Hide error message
    }

    // Function to create skeleton items
    function createSkeletonItems(count) {
      skeletonGrid.innerHTML = ''; // Clear existing skeletons
      for (let i = 0; i < count; i++) {
        const skeletonItem = document.createElement('div');
        skeletonItem.className = 'vs-snp-image-search-skeleton-item';
        skeletonItem.innerHTML = `
                <div class="vs-snp-image-search-skeleton-image"></div>
                <div class="vs-snp-image-search-skeleton-info">
                    <div class="vs-snp-image-search-skeleton-title"></div>
                </div>
            `;
        skeletonGrid.appendChild(skeletonItem);
      }
    }

    // Open modal when button is clicked
    button.addEventListener('click', function () {
      modal.style.display = 'flex';
      resetUploadArea(); // Reset upload area when opening modal
    });

    // Close modal when close button is clicked
    closeButton.addEventListener('click', function () {
      modal.style.display = 'none';

      // Remove Post Image upload styling (dont't remove these)
      document.querySelector('.vs-snp-image-search-modal-content').classList.remove('after');
      document.querySelector('.vs-snp-image-search-modal-header').classList.remove('after');
      document.querySelector('.vs-snp-image-upload-result-wrapper').classList.remove('after');
      document.querySelector('.vs-snp-image-search-modal-body').classList.remove('after');
      document.querySelector('.vs-snp-image-search-upload-area').classList.remove('after');
      document.querySelector('.vs-snp-image-search-results').classList.remove('after');
      document.querySelector('.vs-snp-image-search-popular').classList.remove('after');
      // Remove Post Image upload styling ends

      // Reset the search results and upload area when closing
      resetUploadArea(); // Use the reset function
    });

    // Close modal when clicking outside the modal content
    modal.addEventListener('click', function (event) {
      if (event.target === modal) {
        modal.style.display = 'none';

        // Remove Post Image upload styling (dont't remove these)
        document.querySelector('.vs-snp-image-search-modal-content').classList.remove('after');
        document.querySelector('.vs-snp-image-search-modal-header').classList.remove('after');
        document.querySelector('.vs-snp-image-upload-result-wrapper').classList.remove('after');
        document.querySelector('.vs-snp-image-search-modal-body').classList.remove('after');
        document.querySelector('.vs-snp-image-search-upload-area').classList.remove('after');
        document.querySelector('.vs-snp-image-search-results').classList.remove('after');
        document.querySelector('.vs-snp-image-search-popular').classList.remove('after');
        // Remove Post Image upload styling ends

        // Reset the search results and upload area when closing
        resetUploadArea(); // Use the reset function
      }
    });

    // Trigger file input when upload button is clicked
    uploadButton.addEventListener('click', function () {
      fileInput.click();
    });

    // Trigger file input when "Upload Another" button is clicked
    uploadAnotherButton.addEventListener('click', function () {
      fileInput.click();
      resetUploadArea(); // Reset the area immediately when clicking "Upload Another"
    });

    // Add click event listeners to popular images
    popularImages.forEach(function (img) {
      img.style.cursor = 'pointer';
      img.addEventListener('click', function () {
        // Fetch the image from the src attribute
        fetch(img.src)
          .then((response) => response.blob())
          .then((blob) => {
            // Create a File object from the blob
            const file = new File([blob], 'popular-image.jpg', { type: 'image/jpeg' });
            // Process the image
            processImage(file);
          })
          .catch((error) => {
            console.error('Error fetching popular image:', error);
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = 'Error processing the selected image. Please try again.';
            resetUploadArea(); // Reset upload area on error
          });
      });
    });

    // Function to process the image and send to API
    function processImage(file) {
      trackSearchClick('visual_search', 'image_searched', 'image_searched');

      // Reset upload area and show upload area loading spinner (before preview)
      resetUploadArea();
      uploadIcon.style.display = 'none';
      uploadAreaLoading.style.display = 'block'; // Show spinner before preview
      uploadArea.classList.add('has-content'); // Add class to hide text/button

      // Hide main loading indicator and previous results/errors
      loadingElement.style.display = 'none'; // Ensure main loading is hidden initially
      resultsElement.style.display = 'none';
      errorElement.style.display = 'none';

      // Post Image upload styling (dont't remove these)
      document.querySelector('.vs-snp-image-search-modal-content').classList.add('after');
      document.querySelector('.vs-snp-image-search-modal-header').classList.add('after');
      document.querySelector('.vs-snp-image-upload-result-wrapper').classList.add('after');
      document.querySelector('.vs-snp-image-search-modal-body').classList.add('after');
      document.querySelector('.vs-snp-image-search-upload-area').classList.add('after');
      document.querySelector('.vs-snp-image-search-results').classList.add('after');
      document.querySelector('.vs-snp-image-search-popular').classList.add('after');
      // Post Image upload styling ends

      // Read the file to display preview
      const reader = new FileReader();
      reader.onloadend = function () {
        imagePreview.src = reader.result;
        imagePreview.style.display = 'block'; // Show preview after loading
        uploadAreaLoading.style.display = 'none'; // Hide spinner before preview
        imagePreviewLoading.style.display = 'block'; // Show spinner over preview
        uploadAnotherButton.style.display = 'block'; // Show the "Upload Another" button

        // Show skeleton loaders in the results area
        resultsElement.style.display = 'block'; // Show the results container
        resultsGrid.style.display = 'none'; // Hide the actual results grid
        skeletonGrid.style.display = 'grid'; // Show the skeleton grid
        createSkeletonItems(6); // Create a few skeleton items (e.g., 6)
      };
      reader.readAsDataURL(file);

      // Create form data
      const formData = new FormData();
      formData.append('image', file);

      console.log('formData', formData);

      // Show main loading indicator while fetching (optional, can rely on preview loader)
      // loadingElement.style.display = 'block';

      // Send to API endpoint
      fetch(`${shopUrl}/apps/api/image-searcher`, {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.json())
        .then((data) => {
          // Hide main loading indicator and preview loader
          console.log('data', data);
          loadingElement.style.display = 'none';
          imagePreviewLoading.style.display = 'none'; // Hide preview loader
          skeletonGrid.style.display = 'none'; // Hide skeleton grid

          if (data.error) {
            // Show error message
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = data.error;
            resultsGrid.style.display = 'none'; // Ensure results grid is hidden
            // Keep the preview and "Upload Another" button visible on error
          } else if (data.products && data.products.length > 0) {
            // Display results
            displayResults(data.products);
            resultsGrid.style.display = 'grid'; // Show the actual results grid
          } else {
            // No products found
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = 'No similar products found. Try uploading a different image.';
            resultsGrid.style.display = 'none'; // Ensure results grid is hidden
            // Keep the preview and "Upload Another" button visible if no results
          }
        })
        .catch((error) => {
          // Hide main loading indicator and preview loader, show error
          loadingElement.style.display = 'none';
          imagePreviewLoading.style.display = 'none'; // Hide preview loader
          skeletonGrid.style.display = 'none'; // Hide skeleton grid
          errorElement.style.display = 'block';
          errorElement.querySelector('p').textContent = 'Error connecting to server. Please try again.';
          console.error('Error:', error);
          resultsGrid.style.display = 'none'; // Ensure results grid is hidden
          // Keep the preview and "Upload Another" button visible on fetch error
        });
    }

    // Function to display results
    function displayResults(products) {
      console.log('products', products);
      // Clear previous results
      resultsGrid.innerHTML = '';

      // Create product cards
      products.forEach((product) => {
        const card = document.createElement('div');
        card.className = 'vs-snp-image-search-product-card';

        // Create product image
        let imageHtml = '';
        if (product.featuredImage && product.featuredImage.url) {
          imageHtml = `<div class="vs-snp-card-image-wrapper"><img src="${product.featuredImage.url}" alt="${product.title}" class="vs-snp-image-search-product-image"></div>`;
        } else {
          imageHtml = `<div class="vs-snp-image-search-product-image" style="background-color: #f4f6f8;"></div>`;
        }

        // Calculate match percentage
        const matchPercentage = Math.min(100, Math.round(product.similarityScore * 2));

        // Create product info
        card.innerHTML = `
          ${imageHtml}
          <div class="vs-snp-image-search-product-info">
            <div class="vs-snp-image-search-product-title">${product.title}</div>
            <div class="vs-snp-image-search-product-score">Match: ${matchPercentage}%</div>
            ${product.productType ? `<div class="vs-snp-image-search-product-type">${product.productType}</div>` : ''}
            <div class="vs-snp-image-search-product-description">
              ${
                product.description
                  ? product.description.substring(0, 100) + (product.description.length > 100 ? '...' : '')
                  : 'No description available'
              }
            </div>
          </div>
        `;

        // Add click event to navigate to product
        card.addEventListener('click', function () {
          // Extract the product ID and convert to a handle format if needed
          const productId = product.id;
          const productHandle = product.handle;
          // Navigate to product page - this assumes the ID contains the handle or can be converted to a URL
          window.location.href = `/products/${productHandle}`;
        });

        // Add to results grid
        resultsGrid.appendChild(card);
      });

      // Show results container and hide skeleton
      resultsElement.style.display = 'block';
      resultsGrid.style.display = 'grid'; // Ensure results grid is visible
      skeletonGrid.style.display = 'none'; // Hide skeleton grid
      imagePreviewLoading.style.display = 'none'; // Ensure preview loader is hidden when results show
      uploadAnotherButton.style.display = 'block'; // Keep the "Upload Another" button visible
    }

    // Handle file selection
    fileInput.addEventListener('change', function () {
      if (this.files && this.files[0]) {
        processImage(this.files[0]);
      }
    });

    // Handle drag and drop
    uploadArea.addEventListener('dragover', function (e) {
      e.preventDefault();
      uploadArea.style.borderColor = '#4a4a4a';
    });

    uploadArea.addEventListener('dragleave', function () {
      uploadArea.style.borderColor = '#ccc';
    });

    uploadArea.addEventListener('drop', function (e) {
      e.preventDefault();
      uploadArea.style.borderColor = '#ccc';

      if (e.dataTransfer.files && e.dataTransfer.files[0]) {
        processImage(e.dataTransfer.files[0]);
      }
    });

    // Handle paste events for the entire document
    document.addEventListener('paste', function (e) {
      if (modal.style.display === 'flex') {
        const items = (e.clipboardData || e.originalEvent.clipboardData).items;
        for (let i = 0; i < items.length; i++) {
          if (items[i].type.indexOf('image') !== -1) {
            const blob = items[i].getAsFile();
            processImage(blob);
            break;
          }
        }
      }
    });

    // Function to create skeleton items for popular products
    function createPopularSkeletonItems(count) {
      const popularGrid = document.querySelector('.vs-image-search-popular-grid');
      popularGrid.innerHTML = ''; // Clear existing content

      for (let i = 0; i < count; i++) {
        const skeletonItem = document.createElement('div');
        skeletonItem.className = 'vs-image-search-skeleton-item';
        skeletonItem.innerHTML = `
        <div class="vs-image-search-skeleton-image"></div>
      `;
        popularGrid.appendChild(skeletonItem);
      }

      // Show skeleton loader
      popularGrid.style.display = 'grid';
    }

    // Function to fetch recommended product images
    function fetchRecommendedProducts() {
      const popularGrid = document.querySelector('.vs-snp-image-search-popular-grid');

      // Show skeleton loader before fetching
      createPopularSkeletonItems(6); // Adjust count based on expected number of popular products

      fetch(`${shopUrl}/apps/api/recommended-products`)
        .then((response) => response.json())
        .then((data) => {
          if (data?.products) {
            console.log('Recommended products:', data?.products);
            displayRecommendedProducts(data.products);
          } else {
            console.error('No recommended products found');
          }
        })
        .catch((error) => {
          console.error('Error fetching recommended products:', error);
        });
    }

    // Function to display recommended product images
    function displayRecommendedProducts(products) {
      const popularGrid = document.querySelector('.vs-snp-image-search-popular-grid');
      popularGrid.innerHTML = ''; // Clear existing images

      products.nodes.forEach((product) => {
        if (product.featuredImage && product.featuredImage.url) {
          const img = document.createElement('img');
          img.src = product.featuredImage.url;
          img.alt = product.title;
          img.className = 'vs-snp-popular-image';
          img.loading = 'lazy';

          // Attach click event to fetch and process image
          img.addEventListener('click', function () {
            fetch(img.src)
              .then((response) => response.blob())
              .then((blob) => {
                const file = new File([blob], 'popular-image.jpg', { type: blob.type });
                processImage(file); // Process and open modal
              })
              .catch((error) => {
                console.error('Error fetching popular image:', error);
                errorElement.style.display = 'block';
                errorElement.querySelector('p').textContent = 'Error processing the selected image. Please try again.';
              });
          });

          popularGrid.appendChild(img);
        }
      });

      // After rendering, ensure they are displayed
      popularGrid.style.display = 'grid';
    }

    // Function to hide skeleton loader
    function hideSkeletonLoader() {
      const popularGrid = document.querySelector('.vs-image-search-popular-grid');
      const skeletonItems = popularGrid.querySelectorAll('.vs-image-search-skeleton-item');
      skeletonItems.forEach((item) => item.remove());

      // Optionally, you can display a message or leave it empty
      // If no products and no skeletons, just keep it empty
      if (popularGrid.children.length === 0) {
        popularGrid.style.display = 'none';
      }
    }

    // Fetch recommended products on page load
    fetchRecommendedProducts();

    async function trackSearchClick(type, query, productId = null) {
      console.log('Tracking click:', type, query, productId);
      try {
        await fetch(`${shopUrl}/apps/api/track-search-clicks`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            type,
            query,
            productId,
            shopDomain: window.location.hostname,
          }),
        })
          .then((response) => response.json())
          .then((data) => console.log(data))
          .catch((error) => console.error(error));
      } catch (error) {
        console.error('Error tracking click:', error);
      }
    }
  });
</script>

<!-- Post Image Upload Styling -->
<style>
  .vs-snp-image-search-modal-content.after {
    max-width: 90%;
    max-height: unset !important;
  }
  .vs-snp-image-search-modal-header.after {
    display: flex;
  }
  .vs-snp-image-upload-result-wrapper.after {
    display: flex;
    gap: 15px;
    position: relative;
    align-items: flex-start;
  }
  .vs-snp-image-search-modal-body.after {
    height: 100%;
    overflow: auto;
    max-height: 60vh;
    position: relative;
  }
  .vs-snp-image-search-upload-area.after {
    height: calc(60vh - 40px);
    position: sticky;
    top: 0;
    align-self: flex-start;
    width: 33%;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center vertically */
    align-items: center; /* Center horizontally */
  }
  .vs-snp-image-search-results.after {
    flex: 1;
  }
  .vs-snp-image-search-popular.after {
    display: none;
  }
</style>
