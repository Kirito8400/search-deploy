<link rel="stylesheet" href="https://cdn.shopify.com/s/files/1/0723/1966/4307/files/float-image.css?v=1752751652">

<section class="vs-image-search-float block-{{ block.id }}">
  <button class="vs-image-search-button" id="vs-image-search-button">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
      <circle cx="8.5" cy="8.5" r="1.5"></circle>
      <polyline points="21 15 16 10 5 21"></polyline>
      <line x1="16" y1="16" x2="20" y2="20"></line>
    </svg>
    <span class="vs-image-search-plus">+</span>
  </button>

  <div class="vs-image-search-modal" id="vs-image-search-modal">
    <div class="vs-image-search-modal-content">
      <div class="vs-image-search-modal-header">
        <h2>{{ block.settings.title }}</h2>
        <button class="vs-image-search-close" id="vs-image-search-close">&times;</button>
      </div>
      <div class="vs-image-search-modal-body">
        <!-- Add loading indicator -->
        <div class="vs-image-search-loading" id="vs-image-search-loading" style="display: none;">
          <div class="vs-image-search-spinner"></div>
          <p>Searching for similar products...</p>
        </div>

        <div class="vs-image-upload-result-wrapper">
          <div class="vs-image-search-upload-area" id="vs-image-search-upload-area">
            <div class="vs-image-search-upload-icon" id="vs-image-search-upload-icon">
              <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000">
                <path d="M0 0h24v24H0V0z" fill="none"/>
                <path d="M18 20H4V6h9V4H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-9h-2v9zm-7.79-3.17l-1.96-2.36L5.5 18h11l-3.54-4.71zM20 4V1h-2v3h-3c.01.01 0 2 0 2h3v2.99c.01.01 2 0 2 0V6h3V4h-3z"/>
              </svg>
            </div>
            <div class="vs-image-preview-wrapper" style="position: relative;">
              <div class="">
                <img
                  id="vs-image-preview"
                  class="vs-image-preview"
                  width=""
                  height=""
                  style="display: none; margin: 0px;"
                  alt="Image preview"
                >
                <div class="vs-svg-wrapper" style="position: absolute;">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    version="1.1"
                    width="256"
                    height="256"
                    viewBox="0 0 256 256"
                    xml:space="preserve"
                  >
                    <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">
                    	<polygon points="2,25.95 0,25.95 0,0 25.95,0 25.95,2 2,2 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    	<polygon points="90,25.95 88,25.95 88,2 64.05,2 64.05,0 90,0 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    	<polygon points="25.95,90 0,90 0,64.05 2,64.05 2,88 25.95,88 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    	<polygon points="90,90 64.05,90 64.05,88 88,88 88,64.05 90,64.05 " style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform="  matrix(1 0 0 1 0 0) "/>
                    </g>
                  </svg>
                </div>
              </div>
              <div class="vs-upload-area-loading" id="vs-upload-area-loading" style="display: none;">
                <div class="vs-image-search-spinner"></div>
              </div>
              <!-- New loader for preview -->
              <div class="vs-image-preview-loading" id="vs-image-preview-loading" style="display: none;">
                <div class="vs-image-search-spinner"></div>
              </div>
            </div>
            <p>Drag and drop your image here, click "Upload Image," or paste the image here</p>
            <button class="vs-image-search-upload-button" id="vs-image-search-upload-button">Upload Image</button>
            <input type="file" id="vs-image-search-file-input" accept="image/*" style="display: none;">
            <!-- New button to upload another image -->
            <button class="vs-upload-another-button" id="vs-upload-another-button" style="display: none;">
              Upload Another Image
            </button>
          </div>

          <!-- Add results container -->
          <div class="vs-image-search-results" id="vs-image-search-results" style="display: none;">
            {% comment %} <h3>Similar Products</h3> {% endcomment %}
            <div class="vs-image-search-results-grid" id="vs-image-search-results-grid">
              <!-- Results will be dynamically added here -->
            </div>
            <div class="" style="width: 100%;">
              <!-- Add error message container -->
              <div class="vs-image-search-error" id="vs-image-search-error" style="display: none;">
                <p>Error searching for products. Please try again.</p>
              </div>
            </div>
            <!-- Skeleton loader container -->
            <div class="vs-image-search-skeleton-grid" id="vs-image-search-skeleton-grid" style="display: none;">
              <!-- Skeleton items will be dynamically added here -->
            </div>
          </div>
        </div>

        <div class="vs-image-search-popular">
          <h3>Popular Search Product Images</h3>
          <div class="vs-image-search-popular-grid">
            <!-- Popular product images would be dynamically loaded here -->
            {% comment %}
              <img
                width=""
                height=""
                src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
                alt="Merino Wool Socks Orange"
                class="vs-popular-image"
                loading="lazy"
              >
            {% endcomment %}
            {% comment %}
              <img
                width=""
                height=""
                src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
                alt="Merino Wool Socks Orange"
                loading="lazy"
                class="vs-popular-image"
              >
              <img
                width=""
                height=""
                src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
                alt="Merino Wool Socks Orange"
                loading="lazy"
                class="vs-popular-image"
              >
              <img
                width=""
                height=""
                src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
                alt="Merino Wool Socks Orange"
                loading="lazy"
                class="vs-popular-image"
              >
              <img
                width=""
                height=""
                src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
                alt="Merino Wool Socks Orange"
                loading="lazy"
                class="vs-popular-image"
              >
            {% endcomment %}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const button = document.getElementById('vs-image-search-button');
    const modal = document.getElementById('vs-image-search-modal');
    const closeButton = document.getElementById('vs-image-search-close');
    const uploadButton = document.getElementById('vs-image-search-upload-button');
    const fileInput = document.getElementById('vs-image-search-file-input');
    const uploadArea = document.getElementById('vs-image-search-upload-area');
    const loadingElement = document.getElementById('vs-image-search-loading'); // Main modal loading
    const resultsElement = document.getElementById('vs-image-search-results');
    const resultsGrid = document.getElementById('vs-image-search-results-grid');
    const errorElement = document.getElementById('vs-image-search-error');
    const popularImages = document.querySelectorAll('.vs-popular-image');

    // New elements for upload area content
    const uploadIcon = document.querySelector('.vs-image-search-upload-icon'); // Use class selector
    const imagePreview = document.getElementById('vs-image-preview');
    const uploadAreaLoading = document.getElementById('vs-upload-area-loading'); // Spinner before preview
    const imagePreviewLoading = document.getElementById('vs-image-preview-loading'); // Spinner over preview
    const uploadAnotherButton = document.getElementById('vs-upload-another-button'); // Get the new button
    const skeletonGrid = document.getElementById('vs-image-search-skeleton-grid'); // Get the skeleton container

    // Function to reset the upload area display
    function resetUploadArea() {
      uploadIcon.style.display = 'block';
      imagePreview.style.display = 'none';
      imagePreview.src = ''; // Clear previous preview
      uploadAreaLoading.style.display = 'none';
      imagePreviewLoading.style.display = 'none'; // Hide the preview loader
      uploadAnotherButton.style.display = 'none'; // Hide the new button
      uploadArea.classList.remove('has-content'); // Remove class to show text/button

      // Hide results and skeleton loaders
      resultsElement.style.display = 'none';
      resultsGrid.innerHTML = ''; // Clear previous results
      skeletonGrid.style.display = 'none'; // Hide skeleton grid
      skeletonGrid.innerHTML = ''; // Clear previous skeletons
      errorElement.style.display = 'none'; // Hide error message
    }

    // Function to create skeleton items
    function createSkeletonItems(count) {
      skeletonGrid.innerHTML = ''; // Clear existing skeletons
      for (let i = 0; i < count; i++) {
        const skeletonItem = document.createElement('div');
        skeletonItem.className = 'vs-image-search-skeleton-item';
        skeletonItem.innerHTML = `
          <div class="vs-image-search-skeleton-image"></div>
          <div class="vs-image-search-skeleton-info">
            <div class="vs-image-search-skeleton-title"></div>
          </div>
        `;
        skeletonGrid.appendChild(skeletonItem);
      }
    }

    // Open modal when button is clicked
    button.addEventListener('click', function () {
      modal.style.display = 'flex';
      resetUploadArea(); // Reset upload area when opening modal
    });

    // Close modal when close button is clicked
    closeButton.addEventListener('click', function () {
      modal.style.display = 'none';

      // Remove Post Image upload styling (dont't remove these)
      document.querySelector('.vs-image-search-modal-content').classList.remove('after');
      document.querySelector('.vs-image-search-modal-header').classList.remove('after');
      document.querySelector('.vs-image-upload-result-wrapper').classList.remove('after');
      document.querySelector('.vs-image-search-modal-body').classList.remove('after');
      document.querySelector('.vs-image-search-upload-area').classList.remove('after');
      document.querySelector('.vs-image-search-results').classList.remove('after');
      document.querySelector('.vs-image-search-popular').classList.remove('after');
      // Remove Post Image upload styling ends

      // Reset the search results and upload area when closing
      resetUploadArea(); // Use the reset function
    });

    // Close modal when clicking outside the modal content
    modal.addEventListener('click', function (event) {
      if (event.target === modal) {
        modal.style.display = 'none';

        // Remove Post Image upload styling (dont't remove these)
        document.querySelector('.vs-image-search-modal-content').classList.remove('after');
        document.querySelector('.vs-image-search-modal-header').classList.remove('after');
        document.querySelector('.vs-image-upload-result-wrapper').classList.remove('after');
        document.querySelector('.vs-image-search-modal-body').classList.remove('after');
        document.querySelector('.vs-image-search-upload-area').classList.remove('after');
        document.querySelector('.vs-image-search-results').classList.remove('after');
        document.querySelector('.vs-image-search-popular').classList.remove('after');
        // Remove Post Image upload styling ends

        // Reset the search results and upload area when closing
        resetUploadArea(); // Use the reset function
      }
    });

    // Trigger file input when upload button is clicked
    uploadButton.addEventListener('click', function () {
      fileInput.click();
    });

    // Trigger file input when "Upload Another" button is clicked
    uploadAnotherButton.addEventListener('click', function () {
      fileInput.click();
      resetUploadArea(); // Reset the area immediately when clicking "Upload Another"
    });

    // Add click event listeners to popular images
    popularImages.forEach(function (img) {
      img.style.cursor = 'pointer';
      img.addEventListener('click', function () {
        // Fetch the image from the src attribute
        fetch(img.src)
          .then((response) => response.blob())
          .then((blob) => {
            // Create a File object from the blob
            const file = new File([blob], 'popular-image.jpg', { type: 'image/jpeg' });
            // Process the image
            processImage(file);
          })
          .catch((error) => {
            console.error('Error fetching popular image:', error);
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = 'Error processing the selected image. Please try again.';
            resetUploadArea(); // Reset upload area on error
          });
      });
    });

    // Function to process the image and send to API
    function processImage(file) {
      // Reset upload area and show upload area loading spinner (before preview)
      resetUploadArea();
      uploadIcon.style.display = 'none';
      uploadAreaLoading.style.display = 'block'; // Show spinner before preview
      uploadArea.classList.add('has-content'); // Add class to hide text/button

      // Hide main loading indicator and previous results/errors
      loadingElement.style.display = 'none'; // Ensure main loading is hidden initially
      resultsElement.style.display = 'none';
      errorElement.style.display = 'none';

      // Post Image upload styling (dont't remove these)
      document.querySelector('.vs-image-search-modal-content').classList.add('after');
      document.querySelector('.vs-image-search-modal-header').classList.add('after');
      document.querySelector('.vs-image-upload-result-wrapper').classList.add('after');
      document.querySelector('.vs-image-search-modal-body').classList.add('after');
      document.querySelector('.vs-image-search-upload-area').classList.add('after');
      document.querySelector('.vs-image-search-results').classList.add('after');
      document.querySelector('.vs-image-search-popular').classList.add('after');
      // Post Image upload styling ends

      // Read the file to display preview
      const reader = new FileReader();
      reader.onloadend = function () {
        imagePreview.src = reader.result;
        imagePreview.style.display = 'block'; // Show preview after loading
        uploadAreaLoading.style.display = 'none'; // Hide spinner before preview
        imagePreviewLoading.style.display = 'block'; // Show spinner over preview
        uploadAnotherButton.style.display = 'block'; // Show the "Upload Another" button

        // Show skeleton loaders in the results area
        resultsElement.style.display = 'block'; // Show the results container
        resultsGrid.style.display = 'none'; // Hide the actual results grid
        skeletonGrid.style.display = 'grid'; // Show the skeleton grid
        createSkeletonItems(6); // Create a few skeleton items (e.g., 6)
      };
      reader.readAsDataURL(file);

      // Create form data
      const formData = new FormData();
      formData.append('image', file);

      console.log('formData', formData);

      // Show main loading indicator while fetching (optional, can rely on preview loader)
      // loadingElement.style.display = 'block';

      // Send to API endpoint
      fetch(`${shopUrl}/apps/api/image-searcher`, {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.json())
        .then((data) => {
          // Hide main loading indicator and preview loader
          console.log('data', data);
          loadingElement.style.display = 'none';
          imagePreviewLoading.style.display = 'none'; // Hide preview loader
          skeletonGrid.style.display = 'none'; // Hide skeleton grid

          if (data.error) {
            // Show error message
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = data.error;
            resultsGrid.style.display = 'none'; // Ensure results grid is hidden
            // Keep the preview and "Upload Another" button visible on error
          } else if (data.products && data.products.length > 0) {
            // Display results
            displayResults(data.products);
            resultsGrid.style.display = 'grid'; // Show the actual results grid
          } else {
            // No products found
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = 'No similar products found. Try uploading a different image.';
            resultsGrid.style.display = 'none'; // Ensure results grid is hidden
            // Keep the preview and "Upload Another" button visible if no results
          }
        })
        .catch((error) => {
          // Hide main loading indicator and preview loader, show error
          loadingElement.style.display = 'none';
          imagePreviewLoading.style.display = 'none'; // Hide preview loader
          skeletonGrid.style.display = 'none'; // Hide skeleton grid
          errorElement.style.display = 'block';
          errorElement.querySelector('p').textContent = 'Error connecting to server. Please try again.';
          console.error('Error:', error);
          resultsGrid.style.display = 'none'; // Ensure results grid is hidden
          // Keep the preview and "Upload Another" button visible on fetch error
        });
    }

    // Function to display results
    function displayResults(products) {
      console.log('products', products);
      // Clear previous results
      resultsGrid.innerHTML = '';

      // Create product cards
      products.forEach((product) => {
        const card = document.createElement('div');
        card.className = 'vs-image-search-product-card';

        // Create product image
        let imageHtml = '';
        if (product.featuredImage && product.featuredImage.url) {
          imageHtml = `<div class="vs-card-image-wrapper"><img src="${product.featuredImage.url}" alt="${product.title}" class="vs-image-search-product-image"></div>`;
        } else {
          imageHtml = `<div class="vs-image-search-product-image" style="background-color: #f4f6f8;"></div>`;
        }

        // Calculate match percentage
        const matchPercentage = Math.min(100, Math.round(product.similarityScore * 2));

        // Create product info
        card.innerHTML = `
          ${imageHtml}
          <div class="vs-image-search-product-info">
            <div class="vs-image-search-product-title">${product.title}</div>
            <div class="vs-image-search-product-score">Match: ${matchPercentage}%</div>
            ${product.productType ? `<div class="vs-image-search-product-type">${product.productType}</div>` : ''}
            <div class="vs-image-search-product-description">
              ${
                product.description
                  ? product.description.substring(0, 100) + (product.description.length > 100 ? '...' : '')
                  : 'No description available'
              }
            </div>
          </div>
        `;

        // Add click event to navigate to product
        card.addEventListener('click', function () {
          // Extract the product ID and convert to a handle format if needed
          const productId = product.id;
          const productHandle = product.handle;
          // Navigate to product page - this assumes the ID contains the handle or can be converted to a URL
          // You might need to adjust this based on your Shopify store's URL structure
          window.location.href = `/products/${productHandle}`;
        });

        // Add to results grid
        resultsGrid.appendChild(card);
      });

      // Show results container and hide skeleton
      resultsElement.style.display = 'block';
      resultsGrid.style.display = 'grid'; // Ensure results grid is visible
      skeletonGrid.style.display = 'none'; // Hide skeleton grid
      imagePreviewLoading.style.display = 'none'; // Ensure preview loader is hidden when results show
      uploadAnotherButton.style.display = 'block'; // Keep the "Upload Another" button visible
    }

    // Handle file selection
    fileInput.addEventListener('change', function () {
      if (this.files && this.files[0]) {
        processImage(this.files[0]);
      }
    });

    // Handle drag and drop
    uploadArea.addEventListener('dragover', function (e) {
      e.preventDefault();
      uploadArea.style.borderColor = '#4a4a4a';
    });

    uploadArea.addEventListener('dragleave', function () {
      uploadArea.style.borderColor = '#ccc';
    });

    uploadArea.addEventListener('drop', function (e) {
      e.preventDefault();
      uploadArea.style.borderColor = '#ccc';

      if (e.dataTransfer.files && e.dataTransfer.files[0]) {
        processImage(e.dataTransfer.files[0]);
      }
    });

    // Handle paste events for the entire document
    document.addEventListener('paste', function (e) {
      if (modal.style.display === 'flex') {
        const items = (e.clipboardData || e.originalEvent.clipboardData).items;
        for (let i = 0; i < items.length; i++) {
          if (items[i].type.indexOf('image') !== -1) {
            const blob = items[i].getAsFile();
            processImage(blob);
            break;
          }
        }
      }
    });

    // Function to create skeleton items for popular products
    function createPopularSkeletonItems(count) {
      const popularGrid = document.querySelector('.vs-image-search-popular-grid');
      popularGrid.innerHTML = ''; // Clear existing content

      for (let i = 0; i < count; i++) {
        const skeletonItem = document.createElement('div');
        skeletonItem.className = 'vs-image-search-skeleton-item';
        skeletonItem.innerHTML = `
        <div class="vs-image-search-skeleton-image"></div>
      `;
        popularGrid.appendChild(skeletonItem);
      }

      // Show skeleton loader
      popularGrid.style.display = 'grid';
    }

    // Function to fetch recommended product images
    function fetchRecommendedProducts() {
      const popularGrid = document.querySelector('.vs-image-search-popular-grid');

      // Show skeleton loader before fetching
      createPopularSkeletonItems(6); // Adjust count based on expected number of popular products

      fetch(`${shopUrl}/apps/api/recommended-products`)
        .then((response) => response.json())
        .then((data) => {
          if (data?.products) {
            console.log('Recommended products:', data?.products);
            displayRecommendedProducts(data.products);
          } else {
            console.error('No recommended products found');
          }
        })
        .catch((error) => {
          console.error('Error fetching recommended products:', error);
        });
    }

    // Function to display recommended product images
    function displayRecommendedProducts(products) {
      const popularGrid = document.querySelector('.vs-image-search-popular-grid');
      popularGrid.innerHTML = ''; // Clear existing images

      products.nodes.forEach((product) => {
        if (product.featuredImage && product.featuredImage.url) {
          const img = document.createElement('img');
          img.src = product.featuredImage.url;
          img.alt = product.title;
          img.className = 'vs-popular-image';
          img.loading = 'lazy';

          // Attach click event to fetch and process image
          img.addEventListener('click', function () {
            fetch(img.src)
              .then((response) => response.blob())
              .then((blob) => {
                const file = new File([blob], 'popular-image.jpg', { type: blob.type });
                processImage(file);
              })
              .catch((error) => {
                console.error('Error fetching popular image:', error);
                errorElement.style.display = 'block';
                errorElement.querySelector('p').textContent = 'Error processing the selected image. Please try again.';
              });
          });

          popularGrid.appendChild(img);
        }
      });

      // After rendering, ensure they are displayed
      popularGrid.style.display = 'grid';
    }

    // Function to hide skeleton loader
    function hideSkeletonLoader() {
      const popularGrid = document.querySelector('.vs-image-search-popular-grid');
      const skeletonItems = popularGrid.querySelectorAll('.vs-image-search-skeleton-item');
      skeletonItems.forEach((item) => item.remove());

      // Optionally, you can display a message or leave it empty
      // If no products and no skeletons, just keep it empty
      if (popularGrid.children.length === 0) {
        popularGrid.style.display = 'none';
      }
    }

    // Fetch recommended products on page load
    fetchRecommendedProducts();
  });
</script>

<!-- Additional Styling -->
<style>
    .block-{{ block.id }}{
      .vs-svg-wrapper{
        svg{
          width: 90%;
        }
      }
    }

    .vs-image-search-skeleton-item {
    width: 100%;
    aspect-ratio: 1 / 1;
    background-color: #f0f0f0;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }

  .vs-image-search-skeleton-image {
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 400% 100%;
    animation: shimmer 1.5s infinite linear;
  }

  @keyframes shimmer {
    0% {
      background-position: 0% 0%;
    }
    100% {
      background-position: -400% 0%;
    }
  }
</style>

<!-- Post Image Upload Styling -->
<style>
  .vs-image-search-modal-content.after {
    max-width: 90%;
    max-height: unset !important;
  }

  .vs-image-search-modal-header.after {
    display: flex;
  }

  .vs-image-upload-result-wrapper.after {
    display: flex;
    gap: 15px;
    position: relative;
    align-items: flex-start;
  }

  .vs-image-search-modal-body.after {
    height: 100%;
    overflow: auto;
    max-height: 60vh;
    position: relative;
  }

  .vs-image-search-upload-area.after {
    height: calc(60vh - 40px);
    position: sticky;
    top: 0;
    align-self: flex-start;
    width: auto;
    max-width: 30rem;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center vertically */
    align-items: center; /* Center horizontally */
    margin-bottom: 0px !important;
  }

  .vs-image-search-results.after {
    flex: 1;
  }

  .vs-image-search-popular.after {
    display: none;
  }

  @media (max-width: 1040px) {
    .vs-image-search-upload-area.after {
      max-width: 24rem;
      padding: 1;
      margin: 0;
    }
  }
</style>

{% schema %}
{
  "name": "Image Search Float",
  "target": "body",
  // "stylesheet": "float-image.css",
  // "javascript": "app.js",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Image Search"
    }
  ]
}
{% endschema %}
