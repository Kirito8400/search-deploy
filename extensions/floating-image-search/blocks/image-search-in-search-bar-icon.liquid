<div class=" block-{{ block.id }} vs-search-bar-modal" id="vs-search-bar-modal">
  {%- render 'image-search-snippet' -%}
</div>

<style>
  .vs-search-bar-modal.active {
    display: block !important;
  }
  .vs-snp-image-search-error {
    z-index: 9;
    box-shadow: 2px 2px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Inject image search icon into search bar
    injectImageSearchIcon();

    function injectImageSearchIcon() {
      // Find all search forms
      const searchForms = document.querySelectorAll('form[action="/search"]');
      const searchBarModal = document.getElementById('vs-search-bar-modal');
      // const searchBarCloseButton = document.getElementById('vs-search-bar-modal-close');

      searchForms.forEach((form) => {
        // Create the image search icon
        const searchIconContainer = document.createElement('div');
        searchIconContainer.className = 'vs-search-bar-icon';
        searchIconContainer.innerHTML = `
          <button type="button" class="vs-search-bar-image-button" aria-label="Search by image">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
              <circle cx="8.5" cy="8.5" r="1.5"></circle>
              <polyline points="21 15 16 10 5 21"></polyline>
            </svg>
          </button>
        `;

        // Find the search input or submit button to position our icon next to it
        const searchInput = form.querySelector('input[type="search"], [name="q"], .search-input, .search__input');
        const searchSubmit = form.querySelector('button[type="submit"], .search-submit, .search__submit');

        if (searchInput) {
          // Insert the icon after the search input
          if (searchSubmit) {
            form.insertBefore(searchIconContainer, searchSubmit);
          } else {
            searchInput.parentNode.insertBefore(searchIconContainer, searchInput.nextSibling);
          }

          // Move the modal inside the form for proper positioning
          form.appendChild(searchBarModal);

          // Add click event to open the modal
          const imageButton = searchIconContainer.querySelector('.vs-search-bar-image-button');
          if (imageButton) {
            imageButton.addEventListener('click', function (e) {
              e.preventDefault();
              searchBarModal.classList.toggle('active');
            });
          }
        }
      });
    }
  });

  // when vs-search-bar-image-button button clicked, toggle visiblity of '.vs-sg-search-suggestions-wrapper'
  document.addEventListener('DOMContentLoaded', function () {
    // Ensure the DOM is fully loaded before querying elements
    const imageButton = document.querySelector('.vs-search-bar-image-button');

    if (imageButton) {
      imageButton.addEventListener('click', function (e) {
        e.preventDefault(); // Prevent any default behavior
        console.log('Image search button clicked');

        // Toggle visibility of the suggestions wrapper
        const searchBarSuggestionModal = document.querySelector('form[action="/search"] .vs-sg-search-suggestions-wrapper');
        searchBarSuggestionModal.classList.toggle('zbellow');
      });
    } else {
      console.error('Element with class ".vs-search-bar-image-button" not found.');
    }
  });
</script>

<style>
  .vs-sg-search-suggestions-wrapper {
    visibility: visible;
  }
  .zbellow  {
    z-index: 0 !important;
  }
</style>

{% schema %}
  {
    "name": "Image Search in bar",
    "stylesheet": "image-search-in-bar.css",
    "target": "body"
  }
{% endschema %}

<style>
  .vs-snp-image-search-float {
    position: static !important;
  }
  .vs-snp-image-search-button,
  .vs-snp-image-search-modal-header {
    display: none !important;
  }
  .vs-snp-image-search-modal {
    position: static !important;
    display: block !important;
  }
  .vs-snp-image-search-modal-content {
    max-width: 100% !important;
    width: 100% !important;
    max-width: 100% !important;
    width: 100% !important;
    box-shadow: none;
    border-radius: 0;
    height: auto;
    max-height: fit-content;
  }
  .vs-snp-image-search-upload-area.has-content.after {
    padding: 10px;
  }
  .vs-snp-image-preview {
    margin: 0 !important;
  }
  .vs-snp-svg-wrapper {
    padding: 10px;
  }
  .vs-snp-image-search-results-grid,
  .vs-snp-image-search-skeleton-grid {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 12px;
  }
  .vs-snp-image-search-product-title {
    font-size: 12px;
    line-height: 1.2;
  }
  .vs-snp-image-search-upload-button, .vs-image-search-upload-button{
    font-family: inherit;
  }
</style>
